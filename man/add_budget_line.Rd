% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/iso_lines.R
\name{add_budget_line}
\alias{add_budget_line}
\title{Add a budget line to a data frame of budget lines}
\usage{
add_budget_line(
  .DF = NULL,
  meta,
  graph_type = ReboundTools::graph_types$preferences,
  line_name,
  colour = ReboundTools::graph_colours$grid,
  size = 0.5,
  linetype = "solid",
  slope,
  intercept
)
}
\arguments{
\item{.DF}{The data frame to which lines are appended.
When \code{NULL}, the default, a new data frame is created and returned.
When not \code{NULL}, rows for the budget lines are added to the bottom of \code{.DF}.}

\item{meta}{A data frame of metadata for the segment to be added.
This metadata data frame provides the left-most columns of the return value.}

\item{graph_type}{The type of graph associated with this segment.
Default is See \code{ReboundTools::graph_types$preferences}.}

\item{line_name}{A name for this budget line}

\item{colour}{The colour for this budget line. Default is \code{ReboundTools::graph_colours$grid}.}

\item{size}{The size (width) for this budget line Default is \code{0.5}.}

\item{linetype}{The line type for this budget line Default is "solid".}

\item{slope}{The slope of this budget line.}

\item{intercept}{The intercept of this budget line.}
}
\value{
A version of \code{.DF} with budget lines added at the bottom.
}
\description{
Adds a budget line to a data frame.
The budget lines are accumulated in rows.
}
\details{
There is usually no need to call this function directly.
Functions like \code{iso_budget_lines_prefs()} \code{add_iso()}
call \code{add_budget_line()} internally.
}
\examples{
meta <- tibble::tibble(Case = "Test case")
add_budget_line(meta = meta, 
  line_name = "Test budget line", 
  slope = -1, intercept = 5)
}
